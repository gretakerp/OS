package kompiuteris;

import procesai.*;
import java.util.Iterator;
import java.util.LinkedList;
import procesai.Procesas;
import resursai.Elementas;
import resursai.Resursas;

/**
 *
 * @author  Povilas Panavas & Aurelijus Rožėnas aka TEA GROUP
 */
public class InformacinisLangas extends javax.swing.JFrame {

	private String procScreen = "";
	private String resScreen = "";

	/** Creates new form InformacinisLangas */
	public InformacinisLangas() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputProc = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputRes = new javax.swing.JTextArea();

        setTitle("Informacinis langas");

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        outputProc.setColumns(20);
        outputProc.setEditable(false);
        outputProc.setRows(5);
        outputProc.setTabSize(12);
        outputProc.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jScrollPane1.setViewportView(outputProc);

        jSplitPane1.setLeftComponent(jScrollPane1);

        outputRes.setColumns(20);
        outputRes.setEditable(false);
        outputRes.setRows(5);
        outputRes.setTabSize(12);
        outputRes.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jScrollPane2.setViewportView(outputRes);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );

        setBounds(743, 0, 448, 541);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InformacinisLangas().setVisible(true);
            }
        });
    }

    public void showOwnedElements(Procesas proc) {
        Iterator r = null;
        Object ob = null;
        Elementas ele = null;
        if (proc != null) {
            r = proc.getOwnedResourceElements().iterator();
            if (r != null) {
                while (r.hasNext()) {
                    ob = r.next();
                    if (ob != null) {
                        ele = (Elementas) ob;
                    }
                    if (ele != null) {
                        printProc("-----" + ele.getName() + "\t" + ele.toString());
                    }
                }
            }
        }
    }

    public void refresh() {
        emptyProc();
        printProc("ID  BŪSENA\tPROCESAS");
        printProc("------------------------------------------");
        if (RealiMasina.kernel.getActiveProc() != null) {
            printProc((RealiMasina.kernel.getActiveProc().getId() < 10 ? "0" : "") +
                    RealiMasina.kernel.getActiveProc().getId() + "  :" +
                    RealiMasina.kernel.getActiveProc().getState() +
                    "\t:" + RealiMasina.kernel.getActiveProc().getName());
        }
        if (RealiMasina.kernel.getActiveProc() != null) {
            showOwnedElements(RealiMasina.kernel.getActiveProc());
        }
        Iterator r = null;
        Iterator i = RealiMasina.kernel.getReadyProcesses().iterator();
        while (i.hasNext()) {
            Object ob = i.next();
            Procesas proc = null;
            if (ob != null) {
                proc = (Procesas) ob;
            }
            if (proc != null) {
                printProc((proc.getId() < 10 ? "0" : "") +
                        proc.getId() + "  :" + proc.getState() + "\t:" + proc.getName());
            }
        //if (proc != null) showOwnedElements(proc);
        }
        i = RealiMasina.kernel.getProcesses().iterator();
        while (i.hasNext()) {
            Object ob = i.next();
            Procesas proc = null;
            if (ob != null) {
                proc = (Procesas) ob;
            }
            if (proc != null) {
                printProc((proc.getId() < 10 ? "0" : "") +
                        proc.getId() + "  :" + proc.getState() + "\t:" + proc.getName());
            }
        //if (proc != null) showOwnedElements(proc);
        }
        emptyRes();
        printRes("ID  PROCESAS\tRESURSAS"/*+"\tSTATE"*/);
        printRes("------------------------------------------");
        i = RealiMasina.kernel.getResources().iterator();
        while (i.hasNext()) {
            Object ob = i.next();
            Resursas res = null;
            if (ob != null) {
                res = (Resursas) ob;
            }
            if (res != null) {
                printRes((res.getId() < 10 ? "0" : "") +
                        res.getId() + "  :" +
                        RealiMasina.kernel.getProcess(res.getPId()).getName() +
                        "\t:" + res.getName() /* + "\t:" + res.isReusable()*/);
            }
            r = RealiMasina.kernel.getResource(res.getName()).getAvailableElements().iterator();
            while (r.hasNext()) {
                ob = r.next();
                Elementas ele = null;
                if (ob != null) {
                    ele = (Elementas) ob;
                }
                if (ele != null) {
                    // atminties išvedimas labai apkrauna Infromacinį langą todėl išjungtas
                    // užkomentuoti kitą eilutę norint amintį išvesti
                    if (!ele.getName().equals("Atmintis")) {
                        printRes("----\t" + ele.toString());
					}
				}
			}
		}
		flushInfo();
    }

    private void emptyProc() {
		procScreen = "";
    }

    private void emptyRes() {
		resScreen = "";
    }

    private void printProc(String str) {
		procScreen += str + "\n";
    }

    private void printRes(String str) {
		resScreen += str + "\n";
    }
	
	private void flushInfo() {
		outputProc.setText(procScreen);
		outputRes.setText(resScreen);
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea outputProc;
    private javax.swing.JTextArea outputRes;
    // End of variables declaration//GEN-END:variables
}
