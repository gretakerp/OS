import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class Emulator {

	/* Emulator options */
	private int memorySize = 65536 * 4; // size in words (4bytes)

	public String[] memory = new String[memorySize];
	public int[] PTR = { 0, 0 }; // a2 byte and a3a4 bytes
	public int R = 0;
	public int IC = 0;
	public int SF = 0;
	public int MODE = 1;
	public int TI = 0;
	public int PI = 0;
	public int SI = 0;
	public int IOI = 0;
	public int[] CHST = { 0, 0, 0 };

	public int pageTableFrom = 12770; // from word
	public int PTRTableFrom = 14779;
	public int interruptTableFrom = 15279;
	public int newVMfrom = 5010; // from block
	
	public String buffer = new String();

	Emulator() {
		deleteMemory(); // sets memory's bytes to value = 0
		loadInterruptTable();
	}

	public void deleteMemory() {
		for (int i = 0; i < memorySize; i++) {
			memory[i] = "";
		}
	}

	public String[][] memoryTable() { // creates array[][] for table printing
		String[][] data = new String[memorySize / 4][5];

		for (int i = 0; i < memorySize; i++) {
			if (i % 4 == 0) {
				data[i / 4][0] = Integer.toString(i / 4) + ":";
			}
			data[i / 4][i % 4 + 1] = memory[i];
		}

		return data;
	}

	public void loadPagingTable(int size) { // load paging table for VM
		for (int i = 0; i < size * 10; i++) {
			valueToMemoryBytes(newVMfrom + i, pageTableFrom * 4 + i * 4, 4);
		}

		PTR[0] = size;
		PTR[1] = pageTableFrom / 10; // sets a block number
	}

	public void loadInterruptTable() { // load paging table for VM
		for (int i = 0; i < 256; i++) {
			valueToMemoryBytes(i * 10, interruptTableFrom * 4 + i * 4, 4);
		}
		
		// sets mini programs
		
		for (int i = 0; i < 2; i++) {  //   RD/PD
			
			memory[i * 10 * 4] = "I"; // PD INT number
			memory[i * 10 * 4 + 1] = "O";
			valueToMemoryBytes(0, i * 10 * 4 + 2, 2);
			valueToMemoryBytes(0, i * 10 * 4 + 4, 2);
			valueToMemoryBytes(0, i * 10 * 4 + 6, 1);
			valueToMemoryBytes(0, i * 10 * 4 + 7, 1);
			
			memory[(i * 10 + 2) * 4] = "S"; // back to VM
			memory[(i * 10 + 2) * 4 + 1] = "L";
			memory[(i * 10 + 2) * 4 + 2] = "0";
			memory[(i * 10 + 2) * 4 + 3] = "0";
			
		}
	
		
		for (int i = 2; i < 256; i++) {  // templated mini-programs
		
			memory[i * 10 * 4] = "I"; // prints INT shifter
			memory[i * 10 * 4 + 1] = "O";
			valueToMemoryBytes(i * 10 + 3, i * 10 * 4 + 2, 2);
			valueToMemoryBytes(0, i * 10 * 4 + 4, 2);
			valueToMemoryBytes(1, i * 10 * 4 + 6, 1);
			valueToMemoryBytes(2, i * 10 * 4 + 7, 1);
			
			memory[(i * 10 + 2) * 4] = "S"; // back to VM
			memory[(i * 10 + 2) * 4 + 1] = "L";
			memory[(i * 10 + 2) * 4 + 2] = "0";
			memory[(i * 10 + 2) * 4 + 3] = "0";
			
			valueToMemoryBytes(i, i * 10 * 4 + 3 * 4, 4); // saves INT number to the memory
		}
	}
	 
	public void savePTR() {
		for (int i = 0; i < 500; i++) {
			if (bytesToValue((PTRTableFrom + i) * 4, 4) == 0) {
				valueToMemoryBytes(PTR[0], PTRTableFrom * 4 + i * 4 + 1, 1);
				valueToMemoryBytes(PTR[1], PTRTableFrom * 4 + i * 4 + 2, 2);
				break;
			}
		}
		 
	}
	 
	public void loadVM(File file) {
		try {			
			FileInputStream fstream = new FileInputStream(file);
			DataInputStream in = new DataInputStream(fstream);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));

			String line = br.readLine();

			loadPagingTable(Integer.parseInt(line));
			
			while ((line = br.readLine()) != null) {
				if (line.length() >= 5) {
					// word number of memory to load a command
					int wordNumber = pagingConvert(Integer.parseInt(line.substring(0, 4)), true); // PTR using
					
					if (line.charAt(4) == ':') {
						if (Character.isDigit(line.charAt(5))) { // if command starts with a number in front
							line = line.substring(5);
							String[] numbers = line.split(" ");
							if (numbers.length == 1)
								valueToMemoryBytes(Long.parseLong(numbers[0]), wordNumber * 4, 4);
							else {
								valueToMemoryBytes(Long.parseLong(numbers[0]), wordNumber * 4, 2);
								valueToMemoryBytes(Long.parseLong(numbers[1]), wordNumber * 4 + 2, 1);
								valueToMemoryBytes(Long.parseLong(numbers[2]), wordNumber * 4 + 3, 1);
							}
						} else {
							memory[wordNumber * 4] = line.substring(5, 6); // first letter
							memory[wordNumber * 4 + 1] = line.substring(6, 7); // second letter
							if (line.length() > 7) {
								valueToMemoryBytes(Long.parseLong(line.substring(8, line.length())), wordNumber * 4 + 2, 2);
							}
						}
					}
					
					MODE = 0;
				}
			}
			in.close();
		} catch (Exception e) {
			System.err.println("Error: " + e.getMessage());
		}
		
		//Initialize procedure stack
		valueToMemoryBytes(0, pagingConvert(10 * 10 * PTR[0] - 1, true) * 4 - 14, 2);

		TI = 10;
		MODE = 0;
	}

	public void valueToMemoryBytes(long value, int fromByte, int bytesCount) {
		if (value <= Math.pow(2, bytesCount * 8) - 1) { // check the max value available in bytes
			String bits = Long.toString(decimalToBinary(value));
			
			
			while(bits.length() < bytesCount * 8) { // adds 0 in front of bits string
				bits = "0" + bits;
			}

			for(int i=0; i<bytesCount; i++){ // puts bytes values to memory
				String bitsForByte;
		
				if (bits.length() > 8) {
					bitsForByte = bits.substring(0, 8);
					bits = bits.substring(8, bits.length());
				} else {
					bitsForByte = bits;
				}
				memory[fromByte + i] = binaryToDecimal(bitsForByte);
			}
		}
	}
	
	public int bytesToValue(int fromByte, int bytesCount) { // returns decimal value from bytes
		String bits = "0";
		
		for(int i=0; i<bytesCount; i++) {
			bits += decimalToBinary(memory[fromByte + i]);
		}

		return Integer.parseInt(binaryToDecimal(bits));
	}
	
	public String bytesToValueASC(int fromByte, int bytesCount) { // returns separate bytes values
		String bytes = "";
		
		for(int i=0; i<bytesCount; i++) {
			if (i != 0) {
				bytes += " ";
			}
			if (memory[fromByte + i].isEmpty()) {
				bytes += "0";
			} else {
				bytes += memory[fromByte + i];
			}
		}

		return bytes;
	}
	
	public long decimalToBinary(long dec) {
		return Long.parseLong(Long.toBinaryString(dec), 10);
	}
	
	public String decimalToBinary(String dec) {
		if (isNumeric(dec)) {
			String bin;
			
			bin = Long.toBinaryString(Long.parseLong(dec));
			
			while(bin.length() % 8 != 0) { // adds extra 0 in front for valid byte format
				bin = "0" + bin;
			}
			
			return bin;
		} else {
			return "0";
		}
	}

	public String binaryToDecimal(String bin) {
		return Integer.toString(Integer.parseInt(bin, 2));
	}
	
	
	public String getCommand() {
		String cmd = "";
		
		cmd += memory[pagingConvert(IC) * 4 + 0]; // first letter
		cmd += memory[pagingConvert(IC) * 4 + 1]; // second letter
		
		return cmd;
	}
	
	
	public int getParam() {
		int param = 0;
		
		if (!getCommand().isEmpty()) {
			if (Character.isDigit(getCommand().charAt(0)) || Character.isDigit(getCommand().charAt(1))) {
				// 4 bytes' value
				param = bytesToValue(pagingConvert(IC) * 4, 4);
			} else {
				// 2 bytes' value
				param = bytesToValue(pagingConvert(IC) * 4 + 2, 2);
			}
		}
		
		return param;
	}
	
	public int[] getParams() {
		int[] param = new int[4];
		
		if (MODE == 0) {
			param[0] = bytesToValue(pagingConvert(IC) * 4 + 2, 2);
			param[1] = bytesToValue(pagingConvert(IC) * 4 + 4, 2);
			param[2] = bytesToValue(pagingConvert(IC) * 4 + 6, 1);
			param[3] = bytesToValue(pagingConvert(IC) * 4 + 7, 1);
		}
		
		return param;
	}
	
	
	public long getNumberValue(int wordNumber) {
		int value = 0;
		
		value = bytesToValue(wordNumber * 4, 4);
		
		return value;
	}
	
	public int getWordNum() {
		return pagingConvert(IC);
	}
	
	public static boolean isNumeric(String str) {  
		try {  
			Double.parseDouble(str);  
		} catch(NumberFormatException nfe) {  
			return false;  
		}
		
		return true;  
	}
	
	public boolean executeVM() {
		
		boolean notHalt = true;
		String command = getCommand();
		int x = 0;
		int[] params = new int[4];
		
		if (command.equals("RD") || command.equals("PD") || command.equals("IO")
								 || command.equals("ST") || command.equals("GT"))
			params = getParams();
		else 
			x = getParam();
		
		IC++;
		
		switch (command) {
		  case "AD":
			  cmdAD(x);
		      break;
		  case "SB":
			  cmdSB(x);
		      break;
		  case "ML":
			  cmdML(x);
		      break;
		  case "DD":
			  cmdDD(x);
		      break;
		  case "DM":
			  cmdDM(x);
		      break;
		  case "LR":
			  cmdLR(x);
		      break;
		  case "SR":
			  cmdSR(x);
		      break;
		  case "RD":
			  IC++;
			  cmdRD(params);
		      break;
		  case "PD":
			  IC++;
			  cmdPD(params);
		      break;
		  case "JM":
			  cmdJM(x);
		      break;
		  case "JE":
			  cmdJE(x);
		      break;
		  case "JL":
			  cmdJE(x);
		      break;
		  case "JG":
			  cmdJE(x);
		      break;
		  case "CM":
			  cmdCM(x);
		      break;
		  case "PR":
			  cmdPR(x);
		      break;
		  case "RE":
			  cmdRE();
		      break;
		  case "TT":
			  cmdTT();
		      break;
		  case "IT":
			  cmdIT(x);
		      break;
		  case "IO":
			  IC++;
			  cmdIO(params);
		      break;
		  case "ST":
			  IC++;
			  cmdST(params);
		      break;
		  case "GT":
			  IC++;
			  cmdGT(params);
		      break;
		  case "HL":
			  cmdHL();
			  notHalt = false;
			  break;
		  case "SL":
			  cmdSL(x);
			  notHalt = false;
			  break;
		}
		
		if (MODE == 0) {
			cmdTT();
		}
		
		return notHalt;
	}

	
	// ---------------------------------------------------------------------------------------------------------------------
	// 								VARIOUS COMMANDS
	// ---------------------------------------------------------------------------------------------------------------------
	
	public void saveRegisters() {
		
		int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 - 5; // last VM byte
		valueToMemoryBytes(R, s - 3, 4);
		valueToMemoryBytes(IC, s - 5, 2);
		valueToMemoryBytes(SF, s - 6, 1);
	}
	
	public void loadRegisters() {
		int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 - 5; // last VM byte
		System.out.println("S: " + s);
		System.out.println(pagingConvert(10 * 10 * PTR[0] - 1));
		System.out.println((10 * 10 * PTR[0] - 1));
		R = bytesToValue(s - 3, 4);
		IC = bytesToValue(s - 5, 2);
		SF = bytesToValue(s - 6, 1);
	}
	
	public int pagingConvert(int wordNumber) { // return word number converted by paging table
		return pagingConvert(wordNumber, false);
	}	
	
	public int pagingConvert(int wordNumber, boolean RM) { // return word number converted by paging table
		if (MODE == 0 || RM == true) {
			return bytesToValue(PTR[1] * 10 * 4 + ((wordNumber)/ 10) * 4, 4) * 10 + wordNumber % 10;
		} else {
			return wordNumber;
		}
	}	
	
	
	
	
	// ---------------------------------------------------------------------------------------------------------------------
	// 								VM AND RM COMMANDS
	// ---------------------------------------------------------------------------------------------------------------------
	
		// Arithmetical ----------------------------------
	
	public void cmdAD(int wordNumber) {
		if (R + bytesToValue(pagingConvert(wordNumber) * 4, 4) <= 65535) { // does the answer fit to register R?
			R += bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
	}
	
	public void cmdSB(int wordNumber) {
		if (R - bytesToValue(pagingConvert(wordNumber) * 4, 4) >= 0 ) { // negative numbers not supported
			R -= bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
	}
	
	public void cmdML(int wordNumber) {
		if (R * bytesToValue(pagingConvert(wordNumber) * 4, 4) <= 65535) { // does the answer fit to register R?
			R *= bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
	}
	
	public void cmdDD(int wordNumber) {
		if (bytesToValue(pagingConvert(wordNumber) * 4, 4) != 0) { // if not R div 0
			R = R / bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
		
	}
	
	public void cmdDM(int wordNumber) {
		if (bytesToValue(pagingConvert(wordNumber) * 4, 4) != 0) { // if not R mod 0
			R = R % bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
	}
	
		// Data ----------------------------------
	
	public void cmdLR(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber > PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			R = bytesToValue(pagingConvert(wordNumber) * 4, 4);
		}
	}
	
	public void cmdSR(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber > PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			valueToMemoryBytes(R, pagingConvert(wordNumber) * 4, 4);
		}
	}

		// In/Out ----------------------------------
	
	public void cmdRD(int[] params) {
		if (MODE == 0 && params[3] > 3) { // if channel > 3
			PI = 2;
		} else if (MODE == 0) {		
			int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 + 3; // last VM byte
			valueToMemoryBytes(params[0], s - 7, 2);
			valueToMemoryBytes(params[1], s - 5, 2);
			valueToMemoryBytes(params[2], s - 1, 1);
			valueToMemoryBytes(params[3], s, 1);
			SI = 1;
		} else {
			cmdIO(params);
		}
	}
	
	public void cmdPD(int[] params) {
		if (MODE == 0 && params[3] > 3) { // if channel > 3
			PI = 2;
		} else if (MODE == 0) {
			int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 + 3; // last VM byte
			valueToMemoryBytes(params[0], s - 7, 2);
			valueToMemoryBytes(params[1], s - 5, 2);
			valueToMemoryBytes(params[2], s - 1, 1);
			valueToMemoryBytes(params[3], s, 1);
			SI = 2;
		} else {
			cmdIO(params);
		}
	}
		// Control transfer ----------------------------------
	
	public void cmdJM(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			IC = wordNumber;
		}
	}
	
	public void cmdJE(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {		
			if (SF == 1) {
				IC = wordNumber;
			}
		}
	}
	
	public void cmdJL(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			if (SF == 2) {
				IC = wordNumber;
			}
		}
	}
	
	public void cmdJG(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			if (SF == 3) {
				IC = wordNumber;
			}
		}
	}
	
	public void cmdPR(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else if (MODE == 0) {
			int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 - 14; // byte where stack pointer is
			valueToMemoryBytes(bytesToValue(s, 2) + 1, s, 2); // SP ++
			valueToMemoryBytes(IC, s - 2 * bytesToValue(s, 2), 2);
			IC = wordNumber;
		}
	}
	
	public void cmdRE() {
		int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 - 14; // byte where stack pointer is
		if (MODE == 0 && bytesToValue(s, 2) <= 0) {
			PI = 1;
		} else if (MODE == 0) {
			IC = bytesToValue(s - 2 * bytesToValue(s, 2), 2);
			valueToMemoryBytes(bytesToValue(s, 2) - 1, s, 2); // SP--
		}
	}
	
	public void cmdIT(int interrupt) {
		if (MODE == 0 && interrupt > 255) {
			PI = 1;
		} else if (MODE == 0) {
			MODE = 1;
			handleInterrupt(interrupt);
		}
	}
	
	public void cmdHL() {
		 if (MODE == 0) {
			 SI = 3;
		 }
	}
	
		// Compare ----------------------------------
	
	public void cmdCM(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			if (R == bytesToValue(pagingConvert(wordNumber) * 4, 4)) {
				SF = 1 ;
			} else if (R > bytesToValue(pagingConvert(wordNumber) * 4, 4)) {
				SF = 2 ;
			} else if (R < bytesToValue(pagingConvert(wordNumber) * 4, 4)) {
				SF = 3 ;
			}	
		}
	}
	
	
		// INT check ----------------------------------
	
	public int getIntShift() {
		int shifter = 0;
		
		if (SI == 1) 
			shifter = 0;
		else if (SI == 2)
			shifter = 1;
		else if (SI == 3)
			shifter = 2;
		else if (PI == 1)
			shifter = 3;
		else if (PI == 2)
			shifter = 4;
		else if (TI == 0)
			shifter = 5;
		else if (TI == 0)
			shifter = 5;
		
		return shifter;
	}
	
	public void cmdTT() {
			
			TI--;
			if ((PI != 0) || (SI != 0) || (TI == 0) || (IOI != 0)) {
				saveRegisters();
				MODE = 1;
				handleInterrupt(getIntShift());			
			}
		}

// ---------------------------------------------------------------------------------------------------------------------
//							   RM COMMANDS
//---------------------------------------------------------------------------------------------------------------------
	
	public void cmdIO(int[] params) {
		

		if ((params[0] == 0) & (params[1] == 0) & (params[2] == 0) & (params[3] == 0)) {		
			int s = pagingConvert(10 * 10 * PTR[0] - 1, true) * 4 + 3; // last VM byte
			params[0] = bytesToValue(s - 7, 2);
			params[1] = bytesToValue(s - 5, 2);
			params[2] = bytesToValue(s - 1, 1);
			params[3] = bytesToValue(s, 1);	
		}
	
			
		if (params[3] == 1) {	 // if channel 1
			if (CHST[0] == 0) {	 // if channel 1 is free
				if (SF == 1) {
					CHST[0] = 1; // occupied
					
					GUI.refreshGUI();
					
				    synchronized (GUI.textField) {
				        while (IOI != 1) {
				        	try {
				        		System.out.println("WAITING");
								GUI.textField.wait();
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
				        }

				        IOI = 0;
				    }
				    
				    System.out.println(buffer);
					
					for (int i=0; i<params[2]; i++) {
						long value = Long.parseLong(buffer.split(" ")[i]);
						valueToMemoryBytes(value, pagingConvert(params[1] + i, true) * 4, 4);
					}
					
					IOI = 0;
					CHST[0] = 0; // free again
				}
			}
			
		} else if (params[3] == 2) { // if channel 2
			if (CHST[1] == 0) {	 // if channel 2 is free
				if (SF == 0) {
					CHST[1] = 1; // occupied
					for(int i=0; i<params[2]; i++) {
						GUI.window.addConsole("VM: " + pagingConvert(params[0] + i, true) + ":" + bytesToValueASC(pagingConvert(params[0] + i, true) * 4, 4));
					}
					CHST[1] = 0; // free again
				}
			}			
		
		} else if (params[3] == 3) { // if channel 3
			if (CHST[2] == 0) {	 // if channel 3 is free
				if (SF == 1) { // if reading file
					GUI.window.addConsole("VM: Skaitymas iš failo");
					
					int wordCounter = 0;
					
					
					try {
						
						  FileInputStream fstream = new FileInputStream("HARDDRIVE.txt");
						  DataInputStream in = new DataInputStream(fstream);
						  BufferedReader br = new BufferedReader(new InputStreamReader(in));
						  String strLine;
						  
						  while ((strLine = br.readLine()) != null)   {
							  if (wordCounter == params[0]) {
								  for (int i=0; i<params[2]; i++) {
									  System.out.println (strLine);
									  valueToMemoryBytes(Integer.parseInt(strLine), pagingConvert(params[1] + i, true) * 4, 4);
									  strLine = br.readLine();
								  }
								  break;
								  
							  }
							  wordCounter++;
						  }
						  
						  in.close();
						  
						    }catch (Exception e){ // Catch exception if any
						  System.err.println("Error: " + e.getMessage());
						}

					
					
					
					
				} else { // if writing file
					GUI.window.addConsole("VM: Rašymas į failą");
					
					ArrayList<String> ls =new ArrayList<String>();
					
					try {
						
						  FileInputStream fstream = new FileInputStream("HARDDRIVE.txt");
						  DataInputStream in = new DataInputStream(fstream);
						  BufferedReader br = new BufferedReader(new InputStreamReader(in));
						  String strLine;
						  
						  while ((strLine = br.readLine()) != null)   {
							  ls.add(strLine);
						  }  
						  in.close();
						  
						    }catch (Exception e){ //Catch exception if any
						  System.err.println("Error: " + e.getMessage());
						}
					
					for (int i=0; i<params[2]; i++) {
					ls.set(params[1] + i, Integer.toString(bytesToValue(pagingConvert(params[0] + i, true) * 4, 4)));
					}
					
					
					try{
						  // Create file 
						  FileWriter fstream = new FileWriter("HARDDRIVEtest.txt");
						  BufferedWriter out = new BufferedWriter(fstream);
						  for (int i=0;i<ls.size();i++) {
							  out.write(ls.get(i) + "\r\n");
							}
						  //Close the output stream
						  out.close();
						  }catch (Exception e){//Catch exception if any
						  System.err.println("Error: " + e.getMessage());
						  }
					
				}
			}			
		
		}
	}

	public void cmdSL(int VM) {	
		
		PTR[0] = bytesToValue(PTRTableFrom * 4 + VM * 4, 2);
		PTR[1] = bytesToValue(PTRTableFrom * 4 + VM * 4 + 2, 2);
		MODE = 0;
		loadRegisters();
	}

	public void cmdST(int[] params) {	
		if (MODE == 1) {
			switch (params[0]) {
			case 0:
				PTR[0] = bytesToValue(params[3] * 4, 2);
				PTR[1] = bytesToValue(params[3] * 4 + 2, 2);
				break;
			case 1:
				IC = bytesToValue(params[3] * 4 + 2, 2);
				break;
			case 2:
				SF = bytesToValue(params[3] * 4 + 3, 1);
				break;
			case 3:
				PI = bytesToValue(params[3] * 4 + 2, 2);
				break;
			case 4:
				TI = bytesToValue(params[3] * 4 + 2, 2);
				break;
			case 5:
				SI = bytesToValue(params[3] * 4 + 2, 2);
				break;
			case 6:
				IOI = bytesToValue(params[3] * 4 + 2, 2);
				break;
			case 7:
				CHST[0] = bytesToValue(params[3] * 4 + 3, 1);
				break;
			case 8:
				CHST[1] = bytesToValue(params[3] * 4 + 3, 1);
				break;
			case 9:
				CHST[2] = bytesToValue(params[3] * 4 + 3, 1);
				break;
			case 10:
				MODE = bytesToValue(params[3] * 4 + 3, 1);
				break;
			}
		}
	}
	
	public void cmdGT(int[] params) {	
		if (MODE == 1) {
			switch (params[0]) {
			case 0:
				valueToMemoryBytes(PTR[0], params[3] * 4, 2);
				valueToMemoryBytes(PTR[1], params[3] * 4 + 2, 2);
				break;
			case 1:
				valueToMemoryBytes(IC, params[3] * 4, 4);
				break;
			case 2:
				valueToMemoryBytes(SF, params[3] * 4, 4);
				break;
			case 3:
				valueToMemoryBytes(PI, params[3] * 4, 4);
				break;
			case 4:
				valueToMemoryBytes(TI, params[3] * 4, 4);
				break;
			case 5:
				valueToMemoryBytes(SI, params[3] * 4, 4);
				break;
			case 6:
				valueToMemoryBytes(IOI, params[3] * 4, 4);
				break;
			case 7:
				valueToMemoryBytes(CHST[0], params[3] * 4, 4);
				break;
			case 8:
				valueToMemoryBytes(CHST[1], params[3] * 4, 4);
				break;
			case 9:
				valueToMemoryBytes(CHST[2], params[3] * 4, 4);
				break;
			case 10:
				valueToMemoryBytes(MODE, params[3] * 4, 4);
				break;
			}
		}
	}
	
// ---------------------------------------------------------------------------------------------------------------------
// 								INTERRUPT HANDLING
// ---------------------------------------------------------------------------------------------------------------------

	public void handleInterrupt(int shifter) {
		
		switch (shifter) {
		  case 0: // RD found
			  GUI.window.addConsole("VM: RD perrtraukimas (SI = 1)");
			  SF = 1; //sets SF for reading from the memory
			  savePTR();
			  int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 + 3; // last VM byte
			  int[] params = {bytesToValue(s - 7, 2), bytesToValue(s - 5, 2), bytesToValue(s - 1, 1), bytesToValue(s, 1)};		
			  SI = 0;
			  TI -= 3;
		      break;
		  case 1: // PD found
			  GUI.window.addConsole("VM: PD perrtraukimas (SI = 2)");
			  SF = 0; // sets SF for writing from the memory
			  savePTR();
			  int sPD = pagingConvert(10 * 10 * PTR[0] - 1) * 4 + 3; // last VM byte
			  int[] paramsPD = {bytesToValue(sPD - 7, 2), bytesToValue(sPD - 5, 2), bytesToValue(sPD - 1, 1), bytesToValue(sPD, 1)};	
			  SI = 0;
			  TI -= 3;
		      break;
		  case 2: // HL found
			  GUI.window.addConsole("VM: HL perrtraukimas (SI = 3)");
			  IC = 0;
			  savePTR();
			  saveRegisters();
			  SI = 0;
		      break;
		  case 3:
			  GUI.window.addConsole("VM: Pažeista atminties apsauga (PI = 1)");
			  savePTR();
			  saveRegisters();
			  PI = 0;
		      break;
		  case 4:
			  GUI.window.addConsole("VM: Klaidingas operacijos kodas (PI = 2)");
			  savePTR();
			  saveRegisters();
			  PI = 0;
		      break;
		  case 5: // TI = 0 interrupt
			  GUI.window.addConsole("VM: TI perrtraukimas (TI = 0)");
			  savePTR();
			  saveRegisters();
			  TI = 10;
		      break;
		      
		  default:
			  GUI.window.addConsole("VM: įvyko perrtraukimas su poslinkiu = " + shifter);
		      break;
		}
		
		IC = bytesToValue((interruptTableFrom + shifter) * 4, 4);
	}
}