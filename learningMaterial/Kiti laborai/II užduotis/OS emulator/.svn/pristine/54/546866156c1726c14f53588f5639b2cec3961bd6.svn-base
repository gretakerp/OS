import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;

public class Emulator {

	/* Emulator options */
	private int memorySize = 65536 * 4; // size in words (4bytes)

	public String[] memory = new String[memorySize];
	public int[] PTR = { 0, 0 }; // a2 byte and a3a4 bytes
	public int R = 0;
	public int IC = 0;
	public int SF = 0;
	public int MODE = 1;
	public int TI = 0;
	public int PI = 0;
	public int SI = 0;
	public int IOI = 0;
	public int[] CHST = { 0, 0, 0 };

	int pageTableFrom = 12770; // from word
	int PTRTableFrom = 14779;
	int interruptTableFrom = 15279;
	int newVMfrom = 5010; // from block

	Emulator() {
		deleteMemory(); // sets memory's bytes to value = 0
		loadInterruptTable();
	}

	public void deleteMemory() {
		for (int i = 0; i < memorySize; i++) {
			memory[i] = "";
		}
	}

	public String[][] memoryTable() { // creates array[][] for table printing
		String[][] data = new String[memorySize / 4][5];

		for (int i = 0; i < memorySize; i++) {
			if (i % 4 == 0) {
				data[i / 4][0] = Integer.toString(i / 4) + ":";
			}
			data[i / 4][i % 4 + 1] = memory[i];
		}

		return data;
	}

	public void loadPagingTable(int size) { // load paging table for VM
		for (int i = 0; i < size * 10; i++) {
			valueToMemoryBytes(newVMfrom + i, pageTableFrom * 4 + i * 4, 4);
		}

		PTR[0] = size;
		PTR[1] = pageTableFrom / 10; // sets a block number
	}

	public void loadInterruptTable() { // load paging table for VM
		for (int i = 0; i < 256; i++) {
			valueToMemoryBytes(0 + i, interruptTableFrom * 4 + i * 4, 4);
		}
	}
	 
	public void savePTR() {
		for (int i = 0; i < 500; i++) {
			if (bytesToValue((PTRTableFrom + i) * 4, 4) == 0) {
				valueToMemoryBytes(PTR[0], PTRTableFrom * 4 + i * 4 + 1, 1);
				valueToMemoryBytes(PTR[1], PTRTableFrom * 4 + i * 4 + 2, 2);
				break;
			}
		}
		 
	}
	 
	public void loadVM(File file) {
		try {			
			FileInputStream fstream = new FileInputStream(file);
			DataInputStream in = new DataInputStream(fstream);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));

			String line = br.readLine();

			loadPagingTable(Integer.parseInt(line));
			
			while ((line = br.readLine()) != null) {
				if (line.length() >= 5) {
					// word number of memory to load a command
					int wordNumber = pagingConvert(Integer.parseInt(line.substring(0, 4))); // PTR using
					
					if (line.charAt(4) == ':') {
						if (Character.isDigit(line.charAt(5))) { // if command starts with a number in front
							valueToMemoryBytes(Integer.parseInt(line.substring(5, line.length())), wordNumber * 4, 4);
						} else {
							memory[wordNumber * 4] = line.substring(5, 6); // first letter
							memory[wordNumber * 4 + 1] = line.substring(6, 7); // second letter
							if (line.length() > 7) {
								valueToMemoryBytes(Integer.parseInt(line.substring(8, line.length())), wordNumber * 4 + 2, 2);
							}
						}
					}
					
					MODE = 0;
				}
			}
			in.close();
		} catch (Exception e) {
			System.err.println("Error: " + e.getMessage());
		}
		
		//Initialize procedure stack
		valueToMemoryBytes(0, pagingConvert(10 * 10 * PTR[0] - 1) * 4 - 6, 2);

		TI = 10;
		MODE = 0;
	}

	public void valueToMemoryBytes(int value, int fromByte, int bytesCount) {
		if (value <= Math.pow(2, bytesCount * 8) - 1) { // check the max value available in bytes
			String bits = Long.toString(decimalToBinary(value));
			
			
			while(bits.length() < bytesCount * 8) { // adds 0 in front of bits string
				bits = "0" + bits;
			}

			for(int i=0; i<bytesCount; i++){ // puts bytes values to memory
				String bitsForByte;
		
				if (bits.length() > 8) {
					bitsForByte = bits.substring(0, 8);
					bits = bits.substring(8, bits.length());
				} else {
					bitsForByte = bits;
				}
				memory[fromByte + i] = binaryToDecimal(bitsForByte);
			}
		}
	}
	
	public int bytesToValue(int fromByte, int bytesCount) { // returns decimal value from bytes
		String bits = "0";
		
		for(int i=0; i<bytesCount; i++) {
			bits += decimalToBinary(memory[fromByte + i]);
		}

		return Integer.parseInt(binaryToDecimal(bits));
	}
	
	public long decimalToBinary(int dec) {
		return Long.parseLong(Long.toBinaryString(dec), 10);
	}
	
	public String decimalToBinary(String dec) {
		if (isNumeric(dec)) {
			String bin;
			
			bin = Long.toBinaryString(Long.parseLong(dec));
			
			while(bin.length() % 8 != 0) { // adds extra 0 in front for valid byte format
				bin = "0" + bin;
			}
			
			return bin;
		} else {
			return "0";
		}
	}

	public String binaryToDecimal(String bin) {
		return Integer.toString(Integer.parseInt(bin, 2));
	}
	
	
	public String getCommand() {
		String cmd = "";
		
		cmd += memory[pagingConvert(IC) * 4 + 0]; // first letter
		cmd += memory[pagingConvert(IC) * 4 + 1]; // second letter
		
		return cmd;
	}
	
	
	public int getParam() {
		int param = 0;
		
		if (Character.isDigit(getCommand().charAt(0))) {
			// 4 bytes' value
			param = bytesToValue(pagingConvert(IC) * 4, 4);
		} else {
			// 2 bytes' value
			param = bytesToValue(pagingConvert(IC) * 4 + 2, 2);
		}
		
		return param;
	}
	
	public long getNumberValue(int wordNumber) {
		int value = 0;
		
		value = bytesToValue(wordNumber * 4, 4);
		
		return value;
	}
	
	public int getWordNum() {
		return pagingConvert(IC);
	}
	
	public static boolean isNumeric(String str) {  
		try {  
			Double.parseDouble(str);  
		} catch(NumberFormatException nfe) {  
			return false;  
		}
		
		return true;  
	}
	
	public boolean executeVM() {
		boolean notHalt = true;
		String command = getCommand();
		int x = getParam();
		
		IC++;
		
		switch (command) {
		  case "AD":
			  cmdAD(x);
		      break;
		  case "SB":
			  cmdSB(x);
		      break;
		  case "ML":
			  cmdML(x);
		      break;
		  case "DD":
			  cmdDD(x);
		      break;
		  case "DM":
			  cmdDM(x);
		      break;
		  case "LR":
			  cmdLR(x);
		      break;
		  case "SR":
			  cmdSR(x);
		      break;
		  case "RD":
			  cmdLR(x);
		      break;
		  case "PD":
			  cmdSR(x);
		      break;
		  case "JM":
			  cmdJM(x);
		      break;
		  case "JE":
			  cmdJE(x);
		      break;
		  case "JL":
			  cmdJE(x);
		      break;
		  case "JG":
			  cmdJE(x);
		      break;
		  case "CM":
			  cmdCM(x);
		      break;
		  case "PR":
			  cmdPR(x);
		      break;
		  case "RE":
			  cmdRE();
		      break;
		  case "TT":
			  cmdTT();
		      break;
		  case "IT":
			  cmdIT(x);
		      break;
		  case "HL":
			  cmdHL();
			  notHalt = false;
		}
		
		if (MODE == 0) {
			cmdTT();
		}
		
		return notHalt;
	}

	
	// ---------------------------------------------------------------------------------------------------------------------
	// 								VARIOUS COMMANDS
	// ---------------------------------------------------------------------------------------------------------------------
	
	public void saveRegisters() {
		int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 + 3; // last VM byte
		valueToMemoryBytes(R, s - 3, 4);
		valueToMemoryBytes(IC, s - 5, 2);
		valueToMemoryBytes(SF, s - 6, 1);
	}
	
	public void loadRegisters() {
		int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 + 3; // last VM byte
		R = bytesToValue(s - 3, 4);
		IC = bytesToValue(s - 5, 2);
		SF = bytesToValue(s - 6, 1);
	}
	
	public int pagingConvert(int wordNumber) { // return word number converted by paging table
		return bytesToValue(PTR[1] * 10 * 4 + ((wordNumber)/ 10) * 4, 4) * 10 + wordNumber % 10;
	}	
	
	
	
	
	// ---------------------------------------------------------------------------------------------------------------------
	// 								VM AND RM COMMANDS
	// ---------------------------------------------------------------------------------------------------------------------
	
		// Arithmetical ----------------------------------
	
	public void cmdAD(int wordNumber) {
		if (R + bytesToValue(pagingConvert(wordNumber) * 4, 4) <= 65535) { // does the answer fit to register R?
			R += bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
	}
	
	public void cmdSB(int wordNumber) {
		if (R - bytesToValue(pagingConvert(wordNumber) * 4, 4) >= 0 ) { // negative numbers not supported
			R -= bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
	}
	
	public void cmdML(int wordNumber) {
		if (R * bytesToValue(pagingConvert(wordNumber) * 4, 4) <= 65535) { // does the answer fit to register R?
			R *= bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
	}
	
	public void cmdDD(int wordNumber) {
		if (bytesToValue(pagingConvert(wordNumber) * 4, 4) != 0) { // if not R div 0
			R = R / bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
		
	}
	
	public void cmdDM(int wordNumber) {
		if (bytesToValue(pagingConvert(wordNumber) * 4, 4) != 0) { // if not R mod 0
			R = R % bytesToValue(pagingConvert(wordNumber) * 4, 4);
		} else {
			PI = 2;
		}
	}
	
		// Data ----------------------------------
	
	public void cmdLR(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber > PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			R = bytesToValue(pagingConvert(wordNumber) * 4, 4);
		}
	}
	
	public void cmdSR(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber > PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			valueToMemoryBytes(R, pagingConvert(wordNumber) * 4, 4);
		}
	}

		// In/Out ----------------------------------
	
	public void cmdRD(int channel) {
		if (MODE == 0 && channel > 3) {
			PI = 2;
		} else {
			int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 + 3; // last VM byte
			valueToMemoryBytes(channel, s - 7, 1);
			SI = 1;
		}
	}
	
	public void cmdPD(int channel) {
		if (MODE == 0 && channel > 3) {
			PI = 2;
		} else {
			int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 + 3; // last VM byte
			valueToMemoryBytes(channel, s - 7, 1);
			SI = 2;
		}
	}
		// Control transfer ----------------------------------
	
	public void cmdJM(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			IC = wordNumber;
		}
	}
	
	public void cmdJE(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {		
			if (SF == 1) {
				IC = wordNumber;
			}
		}
	}
	
	public void cmdJL(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			if (SF == 2) {
				IC = wordNumber;
			}
		}
	}
	
	public void cmdJG(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			if (SF == 3) {
				IC = wordNumber;
			}
		}
	}
	
	public void cmdPR(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 - 6; // byte where stack pointer is
			valueToMemoryBytes(bytesToValue(s, 2) + 1, s, 2); // SP ++
			valueToMemoryBytes(IC, s - 2 * bytesToValue(s, 2), 2);
			IC = wordNumber;
		}
	}
	
	public void cmdRE() {
		int s = pagingConvert(10 * 10 * PTR[0] - 1) * 4 - 6; // byte where stack pointer is
		if (MODE == 0 && bytesToValue(s, 2) <= 0) {
			PI = 1;
		} else {
			IC = bytesToValue(s - 2 * bytesToValue(s, 2), 2);
			valueToMemoryBytes(bytesToValue(s, 2) - 1, s, 2); // SP--
		}
	}
	
	public void cmdIT(int interrupt) {
		if (MODE == 0 && interrupt > 255) {
			PI = 1;
		} else {
			handleInterrupt(interrupt);
		}
	}
	
	public void cmdHL() {
		SI = 3;
	}
	
		// Compare ----------------------------------
	
	public void cmdCM(int wordNumber) {
		if (MODE == 0 && (wordNumber < 0 || wordNumber >= PTR[0] * 10 * 10)) {
			PI = 1;
		} else {
			if (R == bytesToValue(pagingConvert(wordNumber) * 4, 4)) {
				SF = 1 ;
			} else if (R > bytesToValue(pagingConvert(wordNumber) * 4, 4)) {
				SF = 2 ;
			} else if (R < bytesToValue(pagingConvert(wordNumber) * 4, 4)) {
				SF = 3 ;
			}	
		}
	}
	
	
		// INT check ----------------------------------
	
	public int getIntShift() {
		int shifter = 0;
		
		if (SI == 1) 
			shifter = 0;
		else if (SI == 2)
			shifter = 1;
		else if (SI == 3)
			shifter = 2;
		else if (PI == 1)
			shifter = 3;
		else if (PI == 2)
			shifter = 4;
		else if (TI == 0)
			shifter = 5;
		else if (TI == 0)
			shifter = 5;
		
		return shifter;
	}
	
	public void cmdTT() {
			
			TI--;
			if ((PI != 0) || (SI != 0) || (TI == 0) || (IOI != 0)) {
				saveRegisters();
				MODE = 1;
				handleInterrupt(getIntShift());			
			}
		}
	
	public void cmdIO(int channel) { // TODO: perdaryti
		if ((PI != 0) || (SI != 0) || (TI == 0) || (IOI != 0)) {
			saveRegisters();
			MODE = 1;
			handleInterrupt(getIntShift());			
		}
	}
	
	
// ---------------------------------------------------------------------------------------------------------------------
//							   RM COMMANDS
//---------------------------------------------------------------------------------------------------------------------
	
	public void cmdSL(int VM) {	
		
		PTR[0] = bytesToValue(PTRTableFrom * 4 + VM * 4 + 1, 1);
		PTR[1] = bytesToValue(PTRTableFrom * 4 + VM * 4 + 2, 2);
		MODE = 0;
		loadRegisters();
	
	}
	
// ---------------------------------------------------------------------------------------------------------------------
// 								INTERRUPT HANDLING
// ---------------------------------------------------------------------------------------------------------------------

	public void handleInterrupt(int shifter) {
		
		shifter = bytesToValue((interruptTableFrom + shifter) * 4, 4);
		
		switch (shifter) {
		  case 0: // RD found
			  GUI.window.addConsole("VM: RD perrtraukimas (SI = 1)");
		      break;
		  case 1: // PD found
			  GUI.window.addConsole("VM: PD perrtraukimas (SI = 2)");
		      break;
		  case 2: // HL found
			  GUI.window.addConsole("VM: HL perrtraukimas (SI = 3)");
			  IC = 0;
		      break;
		  case 3:
			  GUI.window.addConsole("VM: Pažeista atminties apsauga (PI = 1)");
			  savePTR();
			  saveRegisters();
			  cmdSL(0);
		      break;
		  case 4:
			  GUI.window.addConsole("VM: klaidingas operacijos kodas (PI = 2)");
			  savePTR();
			  saveRegisters();
			  cmdSL(0);
		      break;
		  case 5: // TI = 0 interrupt
			  GUI.window.addConsole("VM: TI perrtraukimas (TI = 0)");
			  savePTR();
			  saveRegisters();
			  TI = 10;
			  cmdSL(0);
		      break;
		      
		  default:
			  GUI.window.addConsole("VM: įvyko perrtraukimas su poslinkiu = " + shifter);
		      break;
		}
	}
}